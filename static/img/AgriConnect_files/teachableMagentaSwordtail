/* Open in Val Town: https://www.val.town/v/R_dave/teachableMagentaSwordtail */
import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "https://esm.sh/react/jsx-runtime";
/** @jsxImportSource https://esm.sh/react */
import React, { useState, useEffect } from "https://esm.sh/react";
import { createRoot } from "https://esm.sh/react-dom/client";
function App() {
    const [user, setUser] = useState(null);
    const [view, setView] = useState('login');
    const login = (userType) => {
        setUser({ type: userType, name: `${userType}1` }); // Simple user object
        setView('dashboard');
    };
    const logout = () => {
        setUser(null);
        setView('login');
    };
    return (_jsxs("div", { className: "app", children: [_jsxs("header", { children: [_jsx("h1", { children: "\uD83C\uDF3E AgriConnect" }), user && _jsx("button", { onClick: logout, children: "Logout" })] }), view === 'login' && _jsx(Login, { onLogin: login }), view === 'dashboard' && _jsx(Dashboard, { user: user })] }));
}
function Login({ onLogin }) {
    return (_jsxs("div", { className: "login", children: [_jsx("h2", { children: "Login as:" }), _jsx("button", { onClick: () => onLogin('farmer'), children: "Farmer" }), _jsx("button", { onClick: () => onLogin('buyer'), children: "Buyer" }), _jsx("button", { onClick: () => onLogin('cooperative'), children: "Cooperative" })] }));
}
function Dashboard({ user }) {
    const [activeTab, setActiveTab] = useState('marketplace');
    return (_jsxs("div", { className: "dashboard", children: [_jsxs("nav", { children: [_jsx("button", { onClick: () => setActiveTab('marketplace'), children: "Marketplace" }), _jsx("button", { onClick: () => setActiveTab('chat'), children: "Chat" }), _jsx("button", { onClick: () => setActiveTab('notifications'), children: "Notifications" }), (user.type === 'farmer' || user.type === 'cooperative') && _jsx("button", { onClick: () => setActiveTab('analytics'), children: "Analytics" })] }), activeTab === 'marketplace' && _jsx(Marketplace, { userType: user.type }), activeTab === 'chat' && _jsx(Chat, { currentUser: user }), activeTab === 'notifications' && _jsx(Notifications, {}), activeTab === 'analytics' && _jsx(Analytics, {})] }));
}
function Marketplace({ userType }) {
    const [products, setProducts] = useState([]);
    const [location, setLocation] = useState('');
    useEffect(() => {
        fetchProducts();
    }, []);
    const fetchProducts = async () => {
        const response = await fetch('/api/products');
        const data = await response.json();
        setProducts(data);
    };
    return (_jsxs("div", { className: "marketplace", children: [_jsx("h2", { children: "Marketplace" }), (userType === 'farmer' || userType === 'cooperative') && _jsx("button", { children: "Add New Product" }), _jsx("input", { type: "text", placeholder: "Search by location", value: location, onChange: (e) => setLocation(e.target.value) }), _jsx("div", { className: "product-list", children: products.map(product => (_jsx(ProductCard, { product: product, userType: userType }, product.id))) })] }));
}
function ProductCard({ product, userType }) {
    return (_jsxs("div", { className: "product-card", children: [_jsx("div", { className: "product-image", children: product.image }), _jsx("h3", { children: product.name }), _jsxs("p", { children: ["Price: ", product.price, " RWF/kg"] }), _jsxs("p", { children: ["Seller: ", product.seller] }), _jsxs("p", { children: ["Location: ", product.location] }), _jsxs("div", { className: "rating", children: ["Rating: ", product.rating, "/5"] }), userType === 'buyer' && _jsx("button", { children: "Buy Now" }), _jsx("button", { children: "Contact Seller" })] }));
}
function Chat({ currentUser }) {
    const [contacts, setContacts] = useState([]);
    const [selectedContact, setSelectedContact] = useState(null);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');
    useEffect(() => {
        fetchContacts();
    }, []);
    useEffect(() => {
        if (selectedContact) {
            fetchMessages(selectedContact.id);
        }
    }, [selectedContact]);
    const fetchContacts = async () => {
        const response = await fetch('/api/contacts');
        const data = await response.json();
        setContacts(data);
    };
    const fetchMessages = async (contactId) => {
        const response = await fetch(`/api/messages?contactId=${contactId}`);
        const data = await response.json();
        setMessages(data);
    };
    const sendMessage = async () => {
        if (newMessage.trim() === '')
            return;
        const message = {
            sender: currentUser.name,
            receiver: selectedContact.name,
            content: newMessage,
            timestamp: new Date().toISOString(),
        };
        await fetch('/api/messages', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(message),
        });
        setMessages([...messages, message]);
        setNewMessage('');
    };
    return (_jsxs("div", { className: "chat", children: [_jsxs("div", { className: "contacts", children: [_jsx("h3", { children: "Contacts" }), _jsx("ul", { children: contacts.map(contact => (_jsx("li", { onClick: () => setSelectedContact(contact), className: selectedContact && selectedContact.id === contact.id ? 'selected' : '', children: contact.name }, contact.id))) })] }), _jsx("div", { className: "chat-window", children: selectedContact ? (_jsxs(_Fragment, { children: [_jsxs("h3", { children: ["Chat with ", selectedContact.name] }), _jsx("div", { className: "messages", children: messages.map((message, index) => (_jsxs("div", { className: `message ${message.sender === currentUser.name ? 'sent' : 'received'}`, children: [_jsx("p", { children: message.content }), _jsx("small", { children: new Date(message.timestamp).toLocaleString() })] }, index))) }), _jsxs("div", { className: "message-input", children: [_jsx("input", { type: "text", value: newMessage, onChange: (e) => setNewMessage(e.target.value), placeholder: "Type a message..." }), _jsx("button", { onClick: sendMessage, children: "Send" })] })] })) : (_jsx("p", { children: "Select a contact to start chatting" })) })] }));
}
function Notifications() {
    return (_jsxs("div", { className: "notifications", children: [_jsx("h2", { children: "Notifications" }), _jsxs("ul", { children: [_jsx("li", { children: "New listing: Fresh tomatoes available in Kigali" }), _jsx("li", { children: "Market update: Maize prices have increased by 5%" }), _jsx("li", { children: "Seasonal alert: Harvest season for coffee beans is approaching" })] })] }));
}
function Analytics() {
    return (_jsxs("div", { className: "analytics", children: [_jsx("h2", { children: "Analytics" }), _jsx("p", { children: "Market Insights:" }), _jsxs("ul", { children: [_jsx("li", { children: "Average price of potatoes: 300 RWF/kg" }), _jsx("li", { children: "Most in-demand product this week: Bananas" }), _jsx("li", { children: "Projected increase in demand for rice next month: 15%" })] }), _jsx("p", { children: "Your Performance:" }), _jsxs("ul", { children: [_jsx("li", { children: "Total sales this month: 500,000 RWF" }), _jsx("li", { children: "Most sold product: Cassava" }), _jsx("li", { children: "Customer satisfaction rating: 4.7/5" })] })] }));
}
function client() {
    createRoot(document.getElementById("root")).render(_jsx(App, {}));
}
if (typeof document !== "undefined") {
    client();
}
export default async function server(request) {
    const { pathname, searchParams } = new URL(request.url);
    if (pathname === '/api/products') {
        // Sample product data
        const products = [
            { id: 1, name: 'Organic Bananas', price: 500, seller: 'Kigali Farms', rating: 4.5, location: 'Kigali', image: 'üçå' },
            { id: 2, name: 'Fresh Tomatoes', price: 300, seller: 'Nyabihu Cooperative', rating: 4.2, location: 'Nyabihu', image: 'üçÖ' },
            { id: 3, name: 'Coffee Beans', price: 2000, seller: 'Huye Mountain Coffee', rating: 4.8, location: 'Huye', image: '‚òï' },
            { id: 4, name: 'Cassava', price: 200, seller: 'Ruhango Farmers', rating: 4.0, location: 'Ruhango', image: 'ü•î' },
            { id: 5, name: 'Sweet Potatoes', price: 250, seller: 'Gatsibo Growers', rating: 4.3, location: 'Gatsibo', image: 'üç†' },
        ];
        return new Response(JSON.stringify(products), {
            headers: { 'Content-Type': 'application/json' },
        });
    }
    if (pathname === '/api/contacts') {
        // Sample contacts data
        const contacts = [
            { id: 1, name: 'Kigali Farms' },
            { id: 2, name: 'Nyabihu Cooperative' },
            { id: 3, name: 'Huye Mountain Coffee' },
            { id: 4, name: 'Ruhango Farmers' },
            { id: 5, name: 'Gatsibo Growers' },
        ];
        return new Response(JSON.stringify(contacts), {
            headers: { 'Content-Type': 'application/json' },
        });
    }
    if (pathname === '/api/messages') {
        if (request.method === 'GET') {
            const contactId = searchParams.get('contactId');
            // Sample messages data
            const messages = [
                { sender: 'buyer1', receiver: 'Kigali Farms', content: 'Hello, do you have any bananas available?', timestamp: '2023-06-01T10:00:00Z' },
                { sender: 'Kigali Farms', receiver: 'buyer1', content: 'Yes, we have organic bananas. How many kilos do you need?', timestamp: '2023-06-01T10:05:00Z' },
                { sender: 'buyer1', receiver: 'Kigali Farms', content: 'Great! I need 50 kilos. What\'s the price?', timestamp: '2023-06-01T10:10:00Z' },
            ];
            return new Response(JSON.stringify(messages), {
                headers: { 'Content-Type': 'application/json' },
            });
        }
        else if (request.method === 'POST') {
            // Here you would typically save the message to a database
            // For this example, we'll just return a success response
            return new Response(JSON.stringify({ success: true }), {
                headers: { 'Content-Type': 'application/json' },
            });
        }
    }
    return new Response(`
    <html>
      <head>
        <title>AgriConnect</title>
        <style>${css}</style>
      </head>
      <body>
        <div id="root"></div>
        <script src="https://esm.town/v/std/catch"></script>
        <script type="module" src="${import.meta.url}"></script>
      </body>
    </html>
  `, {
        headers: {
            "content-type": "text/html",
        },
    });
}
const css = `
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f0f8f0;
}

.app {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  background-color: #4CAF50;
  color: white;
  padding: 10px 20px;
  border-radius: 5px;
}

button {
  background-color: #4CAF50;
  border: none;
  color: white;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
  font-size: 16px;
  margin: 4px 2px;
  cursor: pointer;
  border-radius: 5px;
}

.login {
  text-align: center;
  margin-top: 50px;
}

.dashboard nav {
  display: flex;
  justify-content: space-around;
  margin-bottom: 20px;
}

.product-list {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 20px;
}

.product-card {
  border: 1px solid #ddd;
  border-radius: 5px;
  padding: 15px;
  background-color: white;
}

.product-image {
  font-size: 100px;
  text-align: center;
  margin-bottom: 10px;
}

input[type="text"] {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 5px;
}

.notifications ul, .analytics ul {
  list-style-type: none;
  padding: 0;
}

.notifications li, .analytics li {
  background-color: white;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 5px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.chat {
  display: flex;
  height: 500px;
  border: 1px solid #ddd;
  border-radius: 5px;
  overflow: hidden;
}

.contacts {
  width: 200px;
  background-color: #f1f1f1;
  padding: 10px;
  overflow-y: auto;
}

.contacts ul {
  list-style-type: none;
  padding: 0;
}

.contacts li {
  padding: 10px;
  cursor: pointer;
}

.contacts li:hover {
  background-color: #e0e0e0;
}

.contacts li.selected {
  background-color: #4CAF50;
  color: white;
}

.chat-window {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  padding: 10px;
}

.messages {
  flex-grow: 1;
  overflow-y: auto;
  padding: 10px;
}

.message {
  max-width: 70%;
  margin-bottom: 10px;
  padding: 10px;
  border-radius: 5px;
}

.message.sent {
  background-color: #4CAF50;
  color: white;
  align-self: flex-end;
}

.message.received {
  background-color: #f1f1f1;
  align-self: flex-start;
}

.message-input {
  display: flex;
  margin-top: 10px;
}

.message-input input {
  flex-grow: 1;
  margin-right: 10px;
}
`;
